{"version":3,"file":"static/js/283.4f31aed2.chunk.js","mappings":"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","sources":["../node_modules/copy-to-clipboard/index.js","../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/react-copy-to-clipboard/lib/Component.js","../node_modules/react-copy-to-clipboard/lib/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/toggle-selection/index.js","../node_modules/devlop/lib/default.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // avoid screen readers from reading out loud the text\n    mark.ariaHidden = \"true\"\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CopyToClipboard = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _copyToClipboard = _interopRequireDefault(require(\"copy-to-clipboard\"));\n\nvar _excluded = [\"text\", \"onCopy\", \"options\", \"children\"];\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CopyToClipboard = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(CopyToClipboard, _React$PureComponent);\n\n  var _super = _createSuper(CopyToClipboard);\n\n  function CopyToClipboard() {\n    var _this;\n\n    _classCallCheck(this, CopyToClipboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (event) {\n      var _this$props = _this.props,\n          text = _this$props.text,\n          onCopy = _this$props.onCopy,\n          children = _this$props.children,\n          options = _this$props.options;\n\n      var elem = _react[\"default\"].Children.only(children);\n\n      var result = (0, _copyToClipboard[\"default\"])(text, options);\n\n      if (onCopy) {\n        onCopy(text, result);\n      } // Bypass onClick if it was present\n\n\n      if (elem && elem.props && typeof elem.props.onClick === 'function') {\n        elem.props.onClick(event);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CopyToClipboard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          _text = _this$props2.text,\n          _onCopy = _this$props2.onCopy,\n          _options = _this$props2.options,\n          children = _this$props2.children,\n          props = _objectWithoutProperties(_this$props2, _excluded);\n\n      var elem = _react[\"default\"].Children.only(children);\n\n      return /*#__PURE__*/_react[\"default\"].cloneElement(elem, _objectSpread(_objectSpread({}, props), {}, {\n        onClick: this.onClick\n      }));\n    }\n  }]);\n\n  return CopyToClipboard;\n}(_react[\"default\"].PureComponent);\n\nexports.CopyToClipboard = CopyToClipboard;\n\n_defineProperty(CopyToClipboard, \"defaultProps\", {\n  onCopy: undefined,\n  options: undefined\n});","\"use strict\";\n\nvar _require = require('./Component'),\n    CopyToClipboard = _require.CopyToClipboard;\n\nCopyToClipboard.CopyToClipboard = CopyToClipboard;\nmodule.exports = CopyToClipboard;","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["deselectCurrent","require","clipboardToIE11Formatting","module","exports","text","options","debug","message","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","ariaHidden","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","console","warn","window","clearData","setData","onCopy","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","error","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","name","enumerable","configurable","value","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","start","line","node","Position","whitespace","this","end","source","content","errorsList","msg","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","_typeof","Symbol","iterator","CopyToClipboard","_react","_interopRequireDefault","_copyToClipboard","_excluded","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","apply","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_defineProperties","props","descriptor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","self","_assertThisInitialized","_possibleConstructorReturn","ReferenceError","getPrototypeOf","_React$PureComponent","subClass","superClass","create","_inherits","Constructor","protoProps","staticProps","_super","_this","instance","_classCallCheck","_len","args","_key","concat","event","_this$props","children","elem","Children","only","onClick","_this$props2","cloneElement","PureComponent","undefined","styleObject","inline_style_parser_1","default","hasIterator","__importDefault","rangeCount","active","activeElement","ranges","getRangeAt","tagName","toUpperCase","blur","focus","ok","unreachable","emptyOptions","settings","one","includeImageAlt","includeHtml","alt","values","index","join","blankLine","tokenize","effects","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","partial","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","normalizeIdentifier","toLowerCase","resolveAll","events","context","called","resolve","includes","nameRe","nameReJsx","jsx","empty","Schema","normal","space","merge","definitions","assign","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","types","DefinedInfo","mask","super","check","own","definition","properties","info","transform","attributes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClose","onContextLost","onContextMenu","onContextRestored","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","kebab","$0","camelcase","hastToReact","StyleToObject","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","ruleId","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","isNaN","padRight","padLeft","commas","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","optional","toDash","$1","urlAttributes","icon","SpliceBuffer","initial","RangeError","shift","setCursor","stop","reverse","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","decodeNamedCharacterReference","characterReference","innerHTML","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","toStringTag","trough","fns","pipeline","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","ccount","character","findAndReplace","ignored","convert","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","literalWithBreak","EXIT","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse"],"sourceRoot":""}