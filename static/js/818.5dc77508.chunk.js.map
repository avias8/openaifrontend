{"version":3,"file":"static/js/818.5dc77508.chunk.js","mappings":"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","sources":["components/CodeBlock.jsx","components/TypingIndicator.jsx","components/Message.jsx","components/ChatLog.jsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { FaClipboard } from 'react-icons/fa';\r\n\r\nconst CodeContainer = styled.div`\r\n  position: relative;\r\n  background-color: ${({ theme }) => theme.inputBackground};\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  margin: 10px 0;\r\n  box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst PreformattedText = styled.pre`\r\n  overflow-x: auto; /* Ensures horizontal scrolling */\r\n  white-space: nowrap; /* Prevents wrapping */\r\n  font-family: 'Source Code Pro', monospace;\r\n  background-color: ${({ theme }) => theme.inputBackground};\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n\r\n  /* Custom white scrollbar styles */\r\n  &::-webkit-scrollbar {\r\n    height: 8px; /* Horizontal scrollbar height */\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: white; /* White scrollbar thumb */\r\n    border-radius: 4px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: ${({ theme }) => theme.inputBackground}; /* Same background as code */\r\n  }\r\n`;\r\n\r\nconst CodeText = styled.code`\r\n  white-space: nowrap; /* Ensures no wrapping in code */\r\n  display: inline-block; /* Required to respect white-space and overflow */\r\n`;\r\n\r\nconst CopyButton = styled.button`\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background: none;\r\n  border: none;\r\n  color: ${({ theme }) => theme.textColor};\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => theme.messageUser};\r\n  }\r\n`;\r\n\r\nconst CodeBlock = ({ code }) => {\r\n  return (\r\n    <CodeContainer>\r\n      <CopyToClipboard text={code}>\r\n        <CopyButton aria-label=\"Copy to clipboard\">\r\n          <FaClipboard />\r\n        </CopyButton>\r\n      </CopyToClipboard>\r\n      <PreformattedText>\r\n        <CodeText>{code}</CodeText>\r\n      </PreformattedText>\r\n    </CodeContainer>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;\r\n","// src/components/TypingIndicator.jsx\r\n\r\nimport React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst TypingAnimation = keyframes`\r\n  0% { opacity: 0.2; }\r\n  20% { opacity: 1; }\r\n  100% { opacity: 0.2; }\r\n`;\r\n\r\nconst IndicatorContainer = styled.div`\r\n  display: flex;\r\n  gap: 6px; /* Reduced gap between dots */\r\n  margin-top: 4px; /* Reduced margin-top */\r\n\r\n  div {\r\n    width: 8px; /* Adjusted size of dots */\r\n    height: 8px; /* Adjusted size of dots */\r\n    background-color: #667eea; /* Color of dots */\r\n    border-radius: 50%;\r\n    animation: ${TypingAnimation} 1.5s infinite; /* Animation duration */\r\n  }\r\n\r\n  div:nth-child(2) {\r\n    animation-delay: 0.3s; /* Animation delay */\r\n  }\r\n\r\n  div:nth-child(3) {\r\n    animation-delay: 0.6s; /* Animation delay */\r\n  }\r\n`;\r\n\r\nconst TypingIndicator = () => (\r\n  <IndicatorContainer>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </IndicatorContainer>\r\n);\r\n\r\nexport default React.memo(TypingIndicator);","// src/components/Message.jsx\r\nimport React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { FaUserCircle, FaRobot } from 'react-icons/fa'; // Import FaCog for system messages\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport CodeBlock from './CodeBlock'; // Import your CodeBlock component\r\nimport TypingIndicator from './TypingIndicator'; // Import the TypingIndicator component\r\n\r\nconst slideIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\nconst MessageContainer = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin-bottom: 10px;\r\n  max-width: ${({ $sender }) => ($sender === 'user' ? '100%' : '80%')};\r\n  flex-direction: ${({ $sender }) => ($sender === 'user' ? 'row-reverse' : 'row')};\r\n  align-self: ${({ $sender }) => ($sender === 'user' ? 'flex-end' : 'flex-start')};\r\n`;\r\n\r\nconst Avatar = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  img {\r\n    width: ${({ $sender }) => ($sender === 'system' ? '48px' : '24px')};\r\n    height: ${({ $sender }) => ($sender === 'system' ? '48px' : '24px')};\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\nconst MessageBubble = styled.div`\r\n  padding: 10px 15px;\r\n  border-radius: 20px;\r\n  background: ${({ $sender, theme }) =>\r\n    $sender === 'user'\r\n      ? theme.messageUser\r\n      : $sender === 'openai'\r\n      ? theme.messageOpenAI\r\n      : $sender === 'system'\r\n      ? theme.messageSystem\r\n      : theme.messageError};\r\n  color: ${({ theme }) => theme.textColor};\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\r\n  animation: ${slideIn} 0.3s ease-out;\r\n  transition: background 0.3s, color 0.3s;\r\n  word-wrap: normal; /* Ensure words only wrap at word boundaries */\r\n  white-space: normal; /* Wrap text but don't break words */\r\n  max-width: 100%; /* Default max-width for messages on larger screens */\r\n  width: fit-content; /* Prevent message bubbles from stretching unnecessarily */\r\n  margin: 10px; /* Ensure no extra margin */\r\n  flex: 1;\r\n\r\n  @media (max-width: 480px) {\r\n    max-width: 60vw;\r\n  }\r\n\r\n  h1, h2, h3, h4, h5, h6 {\r\n    margin: 5px 0;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n\r\n  ul, ol {\r\n    padding-left: 15px;\r\n    margin: 5px 0;\r\n  }\r\n\r\n  strong {\r\n    font-weight: bold;\r\n  }\r\n\r\n  code {\r\n    background-color: rgba(27, 31, 35, 0.05);\r\n    padding: 0.2em 0.4em;\r\n    margin: 0;\r\n    font-size: 85%;\r\n    border-radius: 3px;\r\n    font-family: 'Source Code Pro', monospace;\r\n    color: inherit;\r\n    white-space: pre-wrap; /* Ensure code wraps properly */\r\n  }\r\n\r\n  /* Table styling */\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin: 10px 0;\r\n    background-color: ${({ theme }) => theme.tableBackground};\r\n  }\r\n\r\n  th, td {\r\n    border: 1px solid ${({ theme }) => theme.tableBorderColor};\r\n    padding: 8px;\r\n  }\r\n\r\n  th {\r\n    background-color: ${({ theme }) => theme.textColor};\r\n    color: ${({ theme }) => theme.background};\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Timestamp = styled.span`\r\n  display: block;\r\n  font-size: 0.75rem;\r\n  color: #ccc;\r\n  margin-top: 5px;\r\n  text-align: ${({ $sender }) => ($sender === 'user' ? 'right' : 'left')};\r\n`;\r\n\r\nconst Message = ({ message }) => {\r\n  const { sender, text, timestamp } = message;\r\n\r\n  return (\r\n    <MessageContainer $sender={sender}>\r\n      <Avatar $sender={sender}>\r\n        {sender === 'openai' && (\r\n          <FaRobot\r\n            size={24}\r\n            color={sender === 'error' ? '#dc3545' : undefined} // Error messages have red icons\r\n          />\r\n        )}\r\n        {sender === 'user' && (\r\n          <FaUserCircle size={24} />\r\n        )}\r\n        {sender === 'system' && (\r\n          <img src=\"https://avivarma.ca/images/avivarma.jpeg\" alt=\"Avi\" />\r\n        )}\r\n        {sender === 'error' && (\r\n          <FaRobot size={24} color=\"#dc3545\" />\r\n        )}\r\n      </Avatar>\r\n      <div>\r\n        <MessageBubble $sender={sender}>\r\n          {sender === 'openai' && text === 'Typing...' ? (\r\n            <TypingIndicator />\r\n          ) : (\r\n            <ReactMarkdown\r\n              remarkPlugins={[remarkGfm]}\r\n              components={{\r\n                code({ node, inline, className, children, ...props }) {\r\n                  const match = /language-(\\w+)/.exec(className || '');\r\n                  return !inline && match ? (\r\n                    <CodeBlock code={String(children).replace(/\\n$/, '')} />\r\n                  ) : (\r\n                    <code\r\n                      className={className}\r\n                      style={{\r\n                        backgroundColor: 'rgba(27,31,35,0.05)',\r\n                        padding: '0.2em 0.4em',\r\n                        borderRadius: '3px',\r\n                        fontFamily: 'Source Code Pro, monospace',\r\n                      }}\r\n                      {...props}\r\n                    >\r\n                      {children}\r\n                    </code>\r\n                  );\r\n                },\r\n                a: ({ node, href, children, ...props }) => (\r\n                  <a\r\n                    href={href}\r\n                    style={{ color: '#667eea', textDecoration: 'underline' }}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    aria-label={children && children.length > 0 ? (typeof children[0] === 'string' ? children[0] : 'Link') : 'Link'}\r\n                    {...props}\r\n                  >\r\n                    {children}\r\n                  </a>\r\n                ),\r\n              }}\r\n            >\r\n              {text}\r\n            </ReactMarkdown>\r\n          )}\r\n        </MessageBubble>\r\n        <Timestamp $sender={sender}>\r\n          {text === 'Typing...' ? 'Typing...' : timestamp}\r\n        </Timestamp>\r\n      </div>\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nexport default React.memo(Message);\r\n","// src/components/ChatLog.jsx\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport Message from './Message';\r\n\r\nconst ChatLogContainer = styled.div`\r\n  flex: 1;\r\n  width: 100%; /* Ensure full width of parent container */\r\n  max-width: 100%; /* Prevent overflow beyond parent width */\r\n  background: rgba(255, 255, 255, 0.05);\r\n  padding: 15px; /* Adjusted padding for spacing */\r\n  box-sizing: border-box; /* Include padding in width/height calculation */\r\n  border-radius: 15px;\r\n  overflow-y: auto; /* Enable vertical scrolling */\r\n  overflow-x: hidden; /* Prevent horizontal overflow */\r\n  margin: 5px auto; /* Remove bottom margin to fit parent width */\r\n  box-shadow: inset 0 4px 10px rgba(0, 0, 0, 0.3);\r\n  max-height: calc(100vh - 160px); /* Set maximum height to fit within the viewport */\r\n\r\n  @media (max-width: 600px) {\r\n    height: 250px;\r\n  }\r\n\r\n  transition: background 0.3s;\r\n\r\n  /* Custom scrollbar styles */\r\n  &::-webkit-scrollbar {\r\n    width: 8px; /* Width of the scrollbar */\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: ${({ theme }) => theme.scrollbarThumb}; /* Color of the scrollbar thumb */\r\n    border-radius: 4px; /* Rounded corners for the scrollbar thumb */\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: ${({ theme }) => theme.scrollbarTrack}; /* Color of the scrollbar track */\r\n  }\r\n`;\r\n\r\nconst ChatLog = ({ chatLog, theme, chatEndRef }) => ( // Accept chatEndRef as a prop\r\n  <ChatLogContainer>\r\n    {chatLog.map((message, index) => (\r\n      <Message key={index} message={message} theme={theme} />\r\n    ))}\r\n    <div ref={chatEndRef} /> {/* For auto-scrolling */}\r\n  </ChatLogContainer>\r\n);\r\n\r\nexport default React.memo(ChatLog);\r\n"],"names":["CodeContainer","styled","div","_ref","theme","inputBackground","PreformattedText","pre","_ref2","_ref3","CodeText","code","CopyButton","button","_ref4","textColor","_ref5","messageUser","_ref6","_jsxs","children","_jsx","CopyToClipboard","text","FaClipboard","TypingAnimation","keyframes","IndicatorContainer","TypingIndicator","React","slideIn","MessageContainer","$sender","Avatar","MessageBubble","messageOpenAI","messageSystem","messageError","_ref7","_ref8","tableBackground","_ref9","tableBorderColor","_ref10","_ref11","background","Timestamp","span","_ref12","Message","_ref13","message","sender","timestamp","FaRobot","size","color","undefined","FaUserCircle","src","alt","ReactMarkdown","remarkPlugins","remarkGfm","components","_ref14","node","inline","className","props","match","exec","CodeBlock","String","replace","style","backgroundColor","padding","borderRadius","fontFamily","a","_ref15","href","textDecoration","target","rel","length","ChatLogContainer","scrollbarThumb","scrollbarTrack","ChatLog","chatLog","chatEndRef","map","index","ref"],"sourceRoot":""}