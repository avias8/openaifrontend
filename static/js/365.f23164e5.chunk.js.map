{"version":3,"file":"static/js/365.f23164e5.chunk.js","mappings":"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","sources":["components/TypingIndicator.jsx","components/Message.jsx","components/ChatLog.jsx"],"sourcesContent":["// src/components/TypingIndicator.jsx\r\n\r\nimport React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst TypingAnimation = keyframes`\r\n  0% { opacity: 0.2; }\r\n  20% { opacity: 1; }\r\n  100% { opacity: 0.2; }\r\n`;\r\n\r\nconst IndicatorContainer = styled.div`\r\n  display: flex;\r\n  gap: 6px; /* Reduced gap between dots */\r\n  margin-top: 4px; /* Reduced margin-top */\r\n\r\n  div {\r\n    width: 8px; /* Adjusted size of dots */\r\n    height: 8px; /* Adjusted size of dots */\r\n    background-color: #667eea; /* Color of dots */\r\n    border-radius: 50%;\r\n    animation: ${TypingAnimation} 1.5s infinite; /* Animation duration */\r\n  }\r\n\r\n  div:nth-child(2) {\r\n    animation-delay: 0.3s; /* Animation delay */\r\n  }\r\n\r\n  div:nth-child(3) {\r\n    animation-delay: 0.6s; /* Animation delay */\r\n  }\r\n`;\r\n\r\nconst TypingIndicator = () => (\r\n  <IndicatorContainer>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </IndicatorContainer>\r\n);\r\n\r\nexport default React.memo(TypingIndicator);","// src/components/Message.jsx\r\n\r\nimport React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { FaUserCircle, FaRobot, FaCog } from 'react-icons/fa'; // Import FaCog for system messages\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport js from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript';\r\nimport { github } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport TypingIndicator from './TypingIndicator'; // Import the TypingIndicator component\r\n\r\n// Register JavaScript language for syntax highlighting\r\nSyntaxHighlighter.registerLanguage('javascript', js);\r\n\r\nconst slideIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\nconst MessageContainer = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin-bottom: 15px;\r\n  max-width: ${({ $sender }) => ($sender === 'user' ? '100%' : '80%')};\r\n  flex-direction: ${({ $sender }) => ($sender === 'user' ? 'row-reverse' : 'row')};\r\n  align-self: ${({ $sender }) => ($sender === 'user' ? 'flex-end' : 'flex-start')};\r\n  \r\n  @media (max-width: 600px) {\r\n    max-width: ${({ $sender }) => ($sender === 'user' ? '95%' : '90%')};\r\n  }\r\n`;\r\n\r\nconst Avatar = styled.div`\r\n  margin-right: ${({ $sender }) => ($sender === 'user' ? '0' : '8px')};\r\n  margin-left: ${({ $sender }) => ($sender === 'user' ? '8px' : '0')};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  img {\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\nconst MessageBubble = styled.div`\r\n  padding: 12px 20px;\r\n  border-radius: 20px;\r\n  background: ${({ $sender, theme }) =>\r\n    $sender === 'user'\r\n      ? theme.messageUser\r\n      : $sender === 'openai'\r\n      ? theme.messageOpenAI\r\n      : theme.messageError};\r\n  color: ${({ theme }) => theme.textColor}; /* Dynamic text color */\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\r\n  animation: ${slideIn} 0.3s ease-out;\r\n  transition: background 0.3s, color 0.3s;\r\n  word-wrap: break-word;\r\n  flex: 1;\r\n\r\n  /* Optional: Style Markdown elements */\r\n  h1, h2, h3, h4, h5, h6 {\r\n    margin: 0;\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  ul, ol {\r\n    padding-left: 20px;\r\n    margin: 5px 0;\r\n  }\r\n\r\n  strong {\r\n    font-weight: bold;\r\n  }\r\n\r\n  code {\r\n    background-color: rgba(27,31,35,0.05);\r\n    padding: 0.2em 0.4em;\r\n    margin: 0;\r\n    font-size: 85%;\r\n    border-radius: 3px;\r\n    font-family: 'Source Code Pro', monospace; /* Use a monospace font for code */\r\n    color: inherit; /* Inherit color to prevent overriding text color */\r\n  }\r\n\r\n  pre {\r\n    background-color: ${({ theme }) => theme.inputBackground};\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    overflow: auto;\r\n    font-family: 'Source Code Pro', monospace; /* Monospace font for code blocks */\r\n    color: inherit; /* Inherit color to prevent overriding text color */\r\n  }\r\n`;\r\n\r\nconst Timestamp = styled.span`\r\n  display: block;\r\n  font-size: 0.75rem;\r\n  color: #ccc;\r\n  margin-top: 5px;\r\n  text-align: ${({ $sender }) => ($sender === 'user' ? 'right' : 'left')};\r\n`;\r\n\r\nconst Message = ({ message }) => {\r\n  const { sender, text, timestamp } = message;\r\n\r\n  // Add console log to check the message text\r\n  console.log(text); // Check if this is properly set to \"Typing...\"\r\n\r\n  return (\r\n    <MessageContainer $sender={sender}>\r\n      <Avatar $sender={sender}>\r\n        {sender === 'openai' && (\r\n          <FaRobot\r\n            size={24}\r\n            color={sender === 'error' ? '#dc3545' : undefined} // Error messages have red icons\r\n          />\r\n        )}\r\n        {sender === 'user' && (\r\n          <FaUserCircle size={24} />\r\n        )}\r\n        {sender === 'system' && (\r\n          <FaCog size={24} /> // System messages use FaCog icon\r\n        )}\r\n        {sender === 'error' && (\r\n          <FaRobot size={24} color=\"#dc3545\" />\r\n        )}\r\n      </Avatar>\r\n      <div>\r\n        <MessageBubble $sender={sender}>\r\n          {sender === 'openai' && text === 'Typing...' ? (\r\n            <TypingIndicator />\r\n          ) : (\r\n            <ReactMarkdown\r\n              remarkPlugins={[remarkGfm]}\r\n              components={{\r\n                code({ node, inline, className, children, ...props }) {\r\n                  const match = /language-(\\w+)/.exec(className || '');\r\n                  return !inline && match ? (\r\n                    <SyntaxHighlighter\r\n                      style={github}\r\n                      language={match[1]}\r\n                      PreTag=\"div\"\r\n                      {...props}\r\n                    >\r\n                      {String(children).replace(/\\n$/, '')}\r\n                    </SyntaxHighlighter>\r\n                  ) : (\r\n                    <code\r\n                      className={className}\r\n                      style={{\r\n                        backgroundColor: 'rgba(27,31,35,0.05)',\r\n                        padding: '0.2em 0.4em',\r\n                        borderRadius: '3px',\r\n                        fontFamily: 'Source Code Pro, monospace',\r\n                      }}\r\n                      {...props}\r\n                    >\r\n                      {children}\r\n                    </code>\r\n                  );\r\n                },\r\n                a: ({ node, href, children, ...props }) => (\r\n                  <a\r\n                    href={href}\r\n                    style={{ color: '#667eea', textDecoration: 'underline' }}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    aria-label={\r\n                      children && children.length > 0\r\n                        ? typeof children[0] === 'string'\r\n                          ? children[0]\r\n                          : 'Link'\r\n                        : 'Link'\r\n                    }\r\n                    {...props}\r\n                  >\r\n                    {children}\r\n                  </a>\r\n                ),\r\n                // Add more custom renderers if needed\r\n              }}\r\n            >\r\n              {text}\r\n            </ReactMarkdown>\r\n          )}\r\n        </MessageBubble>\r\n        <Timestamp $sender={sender}>\r\n          {text === 'Typing...' ? 'Typing...' : timestamp}\r\n        </Timestamp>\r\n      </div>\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nexport default React.memo(Message);","// src/components/ChatLog.jsx\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport Message from './Message';\r\n\r\nconst ChatLogContainer = styled.div`\r\n  flex: 1;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  padding: 15px; /* Reduced padding */\r\n  border-radius: 15px;\r\n  overflow-y: auto; /* Enable vertical scrolling */\r\n  margin-bottom: 20px;\r\n  box-shadow: inset 0 4px 10px rgba(0, 0, 0, 0.3);\r\n  max-height: calc(100vh - 160px); /* Set maximum height to fit within the viewport */\r\n\r\n  @media (max-width: 600px) {\r\n    height: 250px;\r\n  }\r\n\r\n  transition: background 0.3s;\r\n\r\n  /* Custom scrollbar styles */\r\n  &::-webkit-scrollbar {\r\n    width: 8px; /* Width of the scrollbar */\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: ${({ theme }) => theme.scrollbarThumb}; /* Color of the scrollbar thumb */\r\n    border-radius: 4px; /* Rounded corners for the scrollbar thumb */\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: ${({ theme }) => theme.scrollbarTrack}; /* Color of the scrollbar track */\r\n  }\r\n`;\r\n\r\nconst ChatLog = ({ chatLog, theme }) => (\r\n  <ChatLogContainer>\r\n    {chatLog.map((message, index) => (\r\n      <Message key={index} message={message} theme={theme} />\r\n    ))}\r\n  </ChatLogContainer>\r\n);\r\n\r\nexport default React.memo(ChatLog);"],"names":["TypingAnimation","keyframes","IndicatorContainer","styled","div","TypingIndicator","_jsxs","children","_jsx","React","SyntaxHighlighter","registerLanguage","js","slideIn","MessageContainer","_ref","$sender","_ref2","_ref3","_ref4","Avatar","_ref5","_ref6","MessageBubble","_ref7","theme","messageUser","messageOpenAI","messageError","_ref8","textColor","_ref9","inputBackground","Timestamp","span","_ref10","Message","_ref11","message","sender","text","timestamp","console","log","FaRobot","size","color","undefined","FaUserCircle","FaCog","ReactMarkdown","remarkPlugins","remarkGfm","components","code","_ref12","node","inline","className","props","match","exec","style","github","language","PreTag","String","replace","backgroundColor","padding","borderRadius","fontFamily","a","_ref13","href","textDecoration","target","rel","length","ChatLogContainer","scrollbarThumb","scrollbarTrack","ChatLog","chatLog","map","index"],"sourceRoot":""}