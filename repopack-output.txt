This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-30T18:40:15.554Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitattributes
.gitignore
package.json
public/index.html
public/manifest.json
public/ReadMe.md
public/robots.txt
README.md
src/App.jsx
src/App.test.js
src/components/ChatLog.jsx
src/components/CodeBlock.jsx
src/components/Header.jsx
src/components/InputArea.jsx
src/components/Message.jsx
src/components/TypingIndicator.jsx
src/GlobalStyle.js
src/index.css
src/index.js
src/logo.svg
src/reportWebVitals.js
src/themes.js

================================================================
Repository Files
================================================================

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "openaifrontend",
  "version": "1.0.0",
  "private": true,
  "homepage": "https://avias8.github.io/openaifrontend",
  "dependencies": {
    "react": "^18.3.1",
    "react-copy-to-clipboard": "^5.1.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-markdown": "^9.0.1",
    "react-scripts": "5.0.1",
    "react-syntax-highlighter": "^15.6.1",
    "remark-gfm": "^4.0.0",
    "styled-components": "^6.1.13",
    "web-vitals": "^2.1.4"
  },
  "keywords": [
    "React",
    "Express",
    "OpenAI",
    "GPT-4o",
    "LLM"
  ],
  "author": "Avi Varma",
  "license": "ISC",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build -b main"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "gh-pages": "^6.2.0"
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/ReadMe.md
================
# OpenAI Frontend

This is a React-based frontend application that integrates with OpenAI's GPT-4 model. The application allows users to interact with the model through a chat interface.

## Table of Contents

- [Installation](#installation)
- [Usage](#usage)
- [Features](#features)
- [Project Structure](#project-structure)
- [Contributing](#contributing)
- [License](#license)

## Installation

1. Clone the repository:
    ```sh
    git clone https://github.com/yourusername/openaifrontend.git
    cd openaifrontend
    ```

2. Install dependencies:
    ```sh
    npm install
    ```

## Usage

1. Start the development server:
    ```sh
    npm start
    ```

2. Open your browser and navigate to `http://localhost:3000`.

## Features

- **Chat Interface**: Interact with OpenAI's GPT-4 model.
- **Theme Toggle**: Switch between dark and light themes.
- **Code Block**: Display and copy code snippets.
- **Responsive Design**: Optimized for both desktop and mobile devices.

## Project Structure

```
.
├── .gitattributes
├── .gitignore
├── build/
│   ├── asset-manifest.json
│   ├── 

index.html


│   ├── 

manifest.json


│   ├── robots.txt
│   └── static/
│       ├── css/
│       │   └── main.e6c13ad2.css
│       └── js/
│           ├── 4.adf6e940.chunk.js
│           ├── 453.c37d3634.chunk.js
│           ├── 606.e51825a3.chunk.js
│           └── ...
├── 

package.json


├── public/
│   ├── 

index.html


│   ├── 

manifest.json


│   └── robots.txt
├── 

README.md


├── src/
│   ├── 

App.jsx


│   ├── App.test.js
│   ├── components/
│   │   ├── 

ChatLog.jsx


│   │   ├── 

CodeBlock.jsx


│   │   ├── Header.jsx
│   │   ├── InputArea.jsx
│   │   ├── 

Message.jsx


│   │   └── TypingIndicator.jsx
│   ├── 

GlobalStyle.js


│   ├── 

index.css


│   ├── index.js
│   ├── reportWebVitals.js
│   └── themes.js
└── ...
```

## Contributing

Contributions are welcome! Please open an issue or submit a pull request for any changes.

## License

This project is licensed under the ISC License.
```

Feel free to customize this 

README.md

 file further to better suit your project's needs.

avias8: # Project Info
This project is a Front End to Query my custom LLM Inference server hosted via express.

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


Workspace: Here is an updated 

README.md

 file for your repository, incorporating the provided information and additional details about the project structure and features:

```md
# Project Info

This project is a Front End to Query my custom LLM Inference server hosted via express.

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However, we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

## Features

- **Chat Interface**: Interact with OpenAI's GPT-4 model.
- **Theme Toggle**: Switch between dark and light themes.
- **Code Block**: Display and copy code snippets.
- **Responsive Design**: Optimized for both desktop and mobile devices.

## Project Structure

```
.
├── .gitattributes
├── .gitignore
├── build/
│   ├── asset-manifest.json
│   ├── 

index.html


│   ├── 

manifest.json


│   ├── robots.txt
│   └── static/
│       ├── css/
│       │   └── main.e6c13ad2.css
│       └── js/
│           ├── 4.adf6e940.chunk.js
│           ├── 453.c37d3634.chunk.js
│           ├── 606.e51825a3.chunk.js
│           └── ...
├── 

package.json


├── public/
│   ├── 

index.html


│   ├── 

manifest.json


│   └── robots.txt
├── 

README.md


├── src/
│   ├── 

App.jsx


│   ├── 

App.test.js


│   ├── components/
│   │   ├── 

ChatLog.jsx


│   │   ├── 

CodeBlock.jsx


│   │   ├── 

Header.jsx


│   │   ├── InputArea.jsx
│   │   ├── Message.jsx
│   │   └── TypingIndicator.jsx
│   ├── GlobalStyle.js
│   ├── index.css
│   ├── 

index.js


│   ├── reportWebVitals.js
│   └── 

themes.js


└── ...
```

## Contributing

Contributions are welcome! Please open an issue or submit a pull request for any changes.

## License

This project is licensed under the ISC License.

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# OpenAI Frontend

This is a React-based frontend application that integrates with OpenAI's GPT-4 model. The application allows users to interact with the model through a chat interface.

## Table of Contents

- [Installation](#installation)
- [Usage](#usage)
- [Features](#features)
- [Project Structure](#project-structure)
- [Contributing](#contributing)
- [License](#license)

## Installation

1. Clone the repository:
    ```sh
    git clone https://github.com/yourusername/openaifrontend.git
    cd openaifrontend
    ```

2. Install dependencies:
    ```sh
    npm install
    ```

## Usage

1. Start the development server:
    ```sh
    npm start
    ```

2. Open your browser and navigate to `http://localhost:3000`.

## Features

- **Chat Interface**: Interact with OpenAI's GPT-4 model.
- **Theme Toggle**: Switch between dark and light themes.
- **Code Block**: Display and copy code snippets.
- **Responsive Design**: Optimized for both desktop and mobile devices.

## Project Structure

```
.
├── .gitattributes
├── .gitignore
├── build/
│   ├── asset-manifest.json
│   ├── 

index.html


│   ├── 

manifest.json


│   ├── robots.txt
│   └── static/
│       ├── css/
│       │   └── main.e6c13ad2.css
│       └── js/
│           ├── 4.adf6e940.chunk.js
│           ├── 453.c37d3634.chunk.js
│           ├── 606.e51825a3.chunk.js
│           └── ...
├── 

package.json


├── public/
│   ├── 

index.html


│   ├── 

manifest.json


│   └── robots.txt
├── 

README.md


├── src/
│   ├── 

App.jsx


│   ├── App.test.js
│   ├── components/
│   │   ├── 

ChatLog.jsx


│   │   ├── 

CodeBlock.jsx


│   │   ├── Header.jsx
│   │   ├── InputArea.jsx
│   │   ├── 

Message.jsx


│   │   └── TypingIndicator.jsx
│   ├── 

GlobalStyle.js


│   ├── 

index.css


│   ├── index.js
│   ├── reportWebVitals.js
│   └── themes.js
└── ...
```

## Contributing

Contributions are welcome! Please open an issue or submit a pull request for any changes.

## License

This project is licensed under the ISC License.
```

Feel free to customize this 

README.md

 file further to better suit your project's needs.

avias8: # Project Info
This project is a Front End to Query my custom LLM Inference server hosted via express.

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


Workspace: Here is an updated 

README.md

 file for your repository, incorporating the provided information and additional details about the project structure and features:

```md
# Project Info

This project is a Front End to Query my custom LLM Inference server hosted via express.

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However, we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

## Features

- **Chat Interface**: Interact with OpenAI's GPT-4 model.
- **Theme Toggle**: Switch between dark and light themes.
- **Code Block**: Display and copy code snippets.
- **Responsive Design**: Optimized for both desktop and mobile devices.

## Project Structure

```
.
├── .gitattributes
├── .gitignore
├── build/
│   ├── asset-manifest.json
│   ├── 

index.html


│   ├── 

manifest.json


│   ├── robots.txt
│   └── static/
│       ├── css/
│       │   └── main.e6c13ad2.css
│       └── js/
│           ├── 4.adf6e940.chunk.js
│           ├── 453.c37d3634.chunk.js
│           ├── 606.e51825a3.chunk.js
│           └── ...
├── 

package.json


├── public/
│   ├── 

index.html


│   ├── 

manifest.json


│   └── robots.txt
├── 

README.md


├── src/
│   ├── 

App.jsx


│   ├── 

App.test.js


│   ├── components/
│   │   ├── 

ChatLog.jsx


│   │   ├── 

CodeBlock.jsx


│   │   ├── 

Header.jsx


│   │   ├── InputArea.jsx
│   │   ├── Message.jsx
│   │   └── TypingIndicator.jsx
│   ├── GlobalStyle.js
│   ├── index.css
│   ├── 

index.js


│   ├── reportWebVitals.js
│   └── 

themes.js


└── ...
```

## Contributing

Contributions are welcome! Please open an issue or submit a pull request for any changes.

## License

This project is licensed under the ISC License.

================
File: src/App.jsx
================
// src/App.jsx

import React, { useState, useEffect, useRef, Suspense, lazy, useCallback } from 'react';
import styled, { ThemeProvider } from 'styled-components';
import { darkTheme, lightTheme } from './themes';
import Header from './components/Header';
import GlobalStyle from './GlobalStyle'; // Ensure GlobalStyle is imported

// Lazy load ChatLog and InputArea components
const ChatLog = lazy(() => import('./components/ChatLog'));
const InputArea = lazy(() => import('./components/InputArea'));

// Styled Components
const Container = styled.div`
  display: flex;
  flex-direction: column;
  padding: 20px; /* Adjust if needed */
  background: ${({ theme }) => theme.background};
  border-radius: 20px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
  max-width: 1200px;
  margin: 10px auto; /* Reduced top and bottom margin */
  color: ${({ theme }) => theme.textColor};
  position: relative;
  height: calc(100vh - 20px); /* Use the whole viewport height with minimal margins */
  overflow: hidden; /* Prevent overflow outside the container */

  transition: background 0.3s, color 0.3s;

  @media (max-width: 600px) {
    padding: 5px; /* Reduced padding for smaller screens */
    max-width: 90vw;
  }
`;

// Optional: Styled fallback for Suspense
const Loading = styled.div`
  text-align: center;
  padding: 20px;
  color: ${({ theme }) => theme.textColor};
`;

// Main App Component
const App = () => {
  const [prompt, setPrompt] = useState('');
  const [chatLog, setChatLog] = useState([]);
  const [apiStatus, setApiStatus] = useState('checking');
  const [isLoading, setIsLoading] = useState(false);
  const [theme, setTheme] = useState('dark'); // 'light' or 'dark'

  const chatEndRef = useRef(null); // For auto-scrolling

  // Define checkApiStatus before using it in useEffect
  const checkApiStatus = useCallback(async () => {
    try {
      const response = await fetch('https://chatgpt-express-server-186364516466.us-central1.run.app/status');
      if (response.ok) {
        setApiStatus('online');
      } else {
        setApiStatus('offline');
      }
    } catch (error) {
      setApiStatus('offline');
    }
  }, []);

  // Persist theme preference
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme && (savedTheme === 'dark' || savedTheme === 'light')) {
      setTheme(savedTheme);
    }
    checkApiStatus();

  }, [checkApiStatus]);

  useEffect(() => {
    const currentTimestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const initialMessages = [
      {
        id: 1,
        sender: 'system',
        text: `
  # Welcome to Avi Varma's Inference API!

This is a **React-based front end** for interacting with a **Google Cloud-hosted API**. The API provides inference capabilities using **machine learning** models and generates responses for requests you send. Below is a technical overview of the system.

---

## Technical Breakdown

### Backend:
- **Google Cloud Run**: A scalable, serverless platform that automatically adjusts based on traffic while keeping costs low.
- **Express.js**: Manages API requests and integrates with external services like the OpenAI API.
- **Inference API**: Processes user inputs or images and returns predictions in markdown format, allowing flexible responses.

### Frontend:
- **React**: A dynamic, component-based UI built for seamless user experiences.
- **Styled-components**: Scoped CSS for modular design and conflict-free styling.
- **Markdown Handling**: I use \`ReactMarkdown\` for parsing markdown input and supporting rich text formatting.
- **Syntax Highlighting**: Code snippets are highlighted using \`react-syntax-highlighter\`.
- **Clipboard Support for Code Blocks**: I use \`react-copy-to-clipboard\` to add a convenient "copy to clipboard" button, allowing users to easily copy code snippets.

| Key Tooling            | Awesome? |
| ---------------------- | ------ | 
| React                  | ✅ |
| Express.js             | ✅ |
| Google Cloud           | ✅ |
| react-copy-to-clipboard| ✅ |

#### Markdown Rendering:
- **ReactMarkdown**: Displays markdown responses, including formatted text, links, and code blocks.
- [x] **GitHub-flavored markdown (GFM)**: Enabled via the \`remark-gfm\` plugin, supporting features like checkboxes, tables, and strikethroughs.

\`\`\`javascript
function greet(name) {
  return \`Hello, \${name}!\`;
}

console.log(greet('Avi')); // Output: Hello, Avi!
\`\`\`

`,
        timestamp: currentTimestamp
      },
      {
        id: 2,
        sender: 'openai',
        text: `Hey, how can I assist you today?`,
        timestamp: currentTimestamp
      }
    ];
    setChatLog(initialMessages);
  }, []);



  useEffect(() => {
    // Scroll to the bottom when chatLog or isLoading changes
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatLog, isLoading]);

  const handleGenerateText = useCallback(async () => {
    if (!prompt.trim()) {
      alert('Please enter a prompt');
      return;
    }

    const userMessage = {
      sender: 'user',
      text: prompt,
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
    };

    setChatLog((prev) => [...prev, userMessage]);
    setIsLoading(true); // Start loading

    // Add a "Typing..." message
    const typingMessage = {
      sender: 'openai',
      text: 'Typing...',
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
    };
    setChatLog((prev) => [...prev, typingMessage]);

    try {
      const response = await fetch('https://chatgpt-express-server-186364516466.us-central1.run.app/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });

      const data = await response.json();
      const openaiMessage = {
        sender: 'openai',
        text: data.generatedText,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      };

      // Remove the "Typing..." message and add the actual response
      setChatLog((prev) => prev.slice(0, -1).concat(openaiMessage));
    } catch (error) {
      console.error('Error generating text:', error);
      const errorMessage = {
        sender: 'error',
        text: 'Error generating text. Please try again.',
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      };
      setChatLog((prev) => prev.slice(0, -1).concat(errorMessage));
    } finally {
      setIsLoading(false); // Stop loading
    }
  }, [prompt]);

  const toggleTheme = useCallback(() => {
    setTheme((prev) => {
      const newTheme = prev === 'dark' ? 'light' : 'dark';
      localStorage.setItem('theme', newTheme); // Persist theme preference
      return newTheme;
    });
  }, []);

  return (
    <ThemeProvider theme={theme === 'dark' ? darkTheme : lightTheme}>
      <GlobalStyle /> {/* Apply global styles */}
      <Container>
        <Header apiStatus={apiStatus} toggleTheme={toggleTheme} currentTheme={theme} />

        {/* Wrap lazy-loaded components with Suspense */}
        <Suspense fallback={<Loading>Loading chat...</Loading>}>
          <ChatLog chatLog={chatLog} theme={theme} chatEndRef={chatEndRef} /> {/* Pass chatEndRef */}
        </Suspense>

        <Suspense fallback={<Loading>Loading input...</Loading>}>
          <InputArea prompt={prompt} setPrompt={setPrompt} handleGenerateText={handleGenerateText} />
        </Suspense>

        <div ref={chatEndRef} /> {/* For auto-scrolling */}
      </Container>
    </ThemeProvider>
  );
};

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/ChatLog.jsx
================
// src/components/ChatLog.jsx

import React from 'react';
import styled from 'styled-components';
import Message from './Message';

const ChatLogContainer = styled.div`
  flex: 1;
  width: 100%; /* Ensure full width of parent container */
  max-width: 100%; /* Prevent overflow beyond parent width */
  background: rgba(255, 255, 255, 0.05);
  padding: 15px; /* Adjusted padding for spacing */
  box-sizing: border-box; /* Include padding in width/height calculation */
  border-radius: 15px;
  overflow-y: auto; /* Enable vertical scrolling */
  overflow-x: hidden; /* Prevent horizontal overflow */
  margin: 0; /* Remove bottom margin to fit parent width */
  box-shadow: inset 0 4px 10px rgba(0, 0, 0, 0.3);
  max-height: calc(100vh - 160px); /* Set maximum height to fit within the viewport */

  @media (max-width: 600px) {
    height: 250px;
    padding: 10px; /* Reduce padding to prevent overflow on small screens */
  }

  transition: background 0.3s;

  /* Custom scrollbar styles */
  &::-webkit-scrollbar {
    width: 8px; /* Width of the scrollbar */
  }

  &::-webkit-scrollbar-thumb {
    background-color: ${({ theme }) => theme.scrollbarThumb}; /* Color of the scrollbar thumb */
    border-radius: 4px; /* Rounded corners for the scrollbar thumb */
  }

  &::-webkit-scrollbar-track {
    background-color: ${({ theme }) => theme.scrollbarTrack}; /* Color of the scrollbar track */
  }
`;

const ChatLog = ({ chatLog, theme, chatEndRef }) => ( // Accept chatEndRef as a prop
  <ChatLogContainer>
    {chatLog.map((message, index) => (
      <Message key={index} message={message} theme={theme} />
    ))}
    <div ref={chatEndRef} /> {/* For auto-scrolling */}
  </ChatLogContainer>
);

export default React.memo(ChatLog);

================
File: src/components/CodeBlock.jsx
================
// src/components/CodeBlock.jsx

import React from 'react';
import styled from 'styled-components';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import { FaClipboard } from 'react-icons/fa';

const CodeContainer = styled.div`
  position: relative;
  background-color: ${({ theme }) => theme.inputBackground};
  padding: 10px;
  border-radius: 5px;
  overflow: auto;
  font-family: 'Source Code Pro', monospace;
  color: inherit;
  margin: 10px 0;
`;

const CopyButton = styled.button`
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  color: ${({ theme }) => theme.textColor};
  cursor: pointer;
  font-size: 1rem;

  &:hover {
    color: ${({ theme }) => theme.messageUser};
  }
`;

const CodeBlock = ({ code }) => {
  return (
    <CodeContainer>
      <CopyToClipboard text={code}>
        <CopyButton aria-label="Copy to clipboard">
          <FaClipboard />
        </CopyButton>
      </CopyToClipboard>
      <pre>{code}</pre>
    </CodeContainer>
  );
};

export default CodeBlock;

================
File: src/components/Header.jsx
================
// src/components/Header.jsx

import React from 'react';
import styled from 'styled-components';

const HeaderContainer = styled.header`
  display: flex;
  align-items: center;
  margin-bottom: 20px;
`;

const StatusOrb = styled.a`
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background-color: ${({ $status }) =>
    $status === 'online' ? '#28a745' :
    $status === 'offline' ? '#dc3545' : '#ffc107'};
  box-shadow: ${({ $status }) =>
    $status === 'online' ? '0 0 8px rgba(40, 167, 69, 0.6)' :
    $status === 'offline' ? '0 0 8px rgba(220, 53, 69, 0.6)' :
    '0 0 8px rgba(255, 193, 7, 0.6)'};
  transition: background-color 0.3s, box-shadow 0.3s;
  margin-right: 10px;

  @media (max-width: 600px) {
    margin-right: 8px;
  }
`;

const Title = styled.h2`
  font-size: 2rem;
  text-align: center;
  margin: 0;
  flex-grow: 1;

  @media (max-width: 600px) {
    font-size: 1.5rem;
  }
`;

const ThemeToggle = styled.button.attrs({
  'aria-label': 'Toggle theme',
})`
  background: none;
  border: none;
  color: ${({ theme }) => theme.textColor};
  font-size: 1.5rem;
  cursor: pointer;
  outline: none;
  transition: color 0.3s;

  @media (max-width: 600px) {
    font-size: 1.2rem;
  }
`;

const Header = ({ apiStatus, toggleTheme, currentTheme }) => (
  <HeaderContainer>
    <StatusOrb
      href="https://console.cloud.google.com/run/detail/us-central1/chatgpt-express-server/metrics?project=chatgpt-express-server-project"
      target="_blank"
      rel="noopener noreferrer"
      $status={apiStatus}
      title="API Status"
    />
    <Title>Chat with my Inference API</Title>
    <ThemeToggle onClick={toggleTheme}>
      {currentTheme === 'dark' ? '🌞' : '🌜'}
    </ThemeToggle>
  </HeaderContainer>
);

export default React.memo(Header);

================
File: src/components/InputArea.jsx
================
// src/components/InputArea.jsx

import React from 'react';
import styled from 'styled-components';

// Styled Components
const InputContainer = styled.div`
  display: flex;
  gap: 10px;
`;

const TextArea = styled.textarea.attrs({
  'aria-label': 'Type your message',
})`
  flex: 1;
  padding: 15px 20px;
  border-radius: 12px;
  background: ${({ theme }) => theme.inputBackground};
  border: none;
  color: ${({ theme }) => theme.textColor};
  resize: none;
  font-size: 1rem;
  box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.5);
  transition: background 0.3s, box-shadow 0.3s, color 0.3s;

  &::placeholder {
    color: ${({ theme }) => theme.placeholderColor};
    opacity: 1; /* Ensure placeholder is fully opaque */
  }

  &:focus {
    background: ${({ theme }) => theme.inputFocusBackground};
    box-shadow: inset 0 4px 10px
      ${({ theme }) =>
        theme.mode === 'dark'
          ? 'rgba(0, 0, 0, 0.7)'
          : 'rgba(0, 0, 0, 0.3)'};
    outline: none;
  }

  @media (max-width: 600px) {
    padding: 12px 16px;
    font-size: 0.9rem;
  }
`;

const SendButton = styled.button.attrs({
  'aria-label': 'Send message',
})`
  padding: 15px 25px;
  border: none;
  border-radius: 12px;
  background: ${({ theme }) => theme.sendButtonBackground};
  color: #fff;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;

  &:hover {
    background: ${({ theme }) => theme.sendButtonHoverBackground};
    transform: translateY(-2px);
  }

  &:active {
    transform: translateY(0);
  }

  &:focus {
    outline: 2px solid ${({ theme }) => theme.messageUser};
    outline-offset: 2px;
  }

  @media (max-width: 600px) {
    padding: 12px 20px;
    font-size: 0.9rem;
  }
`;

const InputArea = ({ prompt, setPrompt, handleGenerateText }) => {
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleGenerateText();
      setPrompt(''); // Clear the text box
    }
  };

  const handleClick = () => {
    handleGenerateText();
    setPrompt(''); // Clear the text box
  };

  return (
    <InputContainer>
      <TextArea
        placeholder="Type your message..."
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        onKeyPress={handleKeyPress} // Handle Enter key press
        rows={2}
      />
      <SendButton onClick={handleClick}>Send</SendButton>
    </InputContainer>
  );
};

export default React.memo(InputArea);

================
File: src/components/Message.jsx
================
// src/components/Message.jsx
import React from 'react';
import styled, { keyframes } from 'styled-components';
import { FaUserCircle, FaRobot } from 'react-icons/fa'; // Import FaCog for system messages
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import CodeBlock from './CodeBlock'; // Import your CodeBlock component
import TypingIndicator from './TypingIndicator'; // Import the TypingIndicator component

const slideIn = keyframes`
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
`;

const MessageContainer = styled.div`
  display: flex;
  align-items: flex-start;
  margin-bottom: 10px;
  max-width: ${({ $sender }) => ($sender === 'user' ? '100%' : '80%')};
  flex-direction: ${({ $sender }) => ($sender === 'user' ? 'row-reverse' : 'row')};
  align-self: ${({ $sender }) => ($sender === 'user' ? 'flex-end' : 'flex-start')};
`;

const Avatar = styled.div`
  display: flex;
  align-items: center;

  img {
    width: ${({ $sender }) => ($sender === 'system' ? '48px' : '24px')};
    height: ${({ $sender }) => ($sender === 'system' ? '48px' : '24px')};
    border-radius: 50%;
  }
`;

const MessageBubble = styled.div`
  padding: 10px 15px;
  border-radius: 20px;
  background: ${({ $sender, theme }) =>
    $sender === 'user'
      ? theme.messageUser
      : $sender === 'openai'
      ? theme.messageOpenAI
      : $sender === 'system'
      ? theme.messageSystem
      : theme.messageError};
  color: ${({ theme }) => theme.textColor};
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
  animation: ${slideIn} 0.3s ease-out;
  transition: background 0.3s, color 0.3s;
  word-wrap: normal; /* Ensure words only wrap at word boundaries */
  white-space: normal; /* Wrap text but don't break words */
  max-width: 90%; /* Default max-width for messages on larger screens */
  width: fit-content; /* Prevent message bubbles from stretching unnecessarily */
  margin: 10px; /* Ensure no extra margin */
  flex: 1;

  @media (max-width: 480px) {
    max-width: 60%; /* Set message bubble width to 75% on smallest screens */
  }

  h1, h2, h3, h4, h5, h6 {
    margin: 5px 0;
  }

  p {
    margin: 5px 0;
  }

  ul, ol {
    padding-left: 15px;
    margin: 5px 0;
  }

  strong {
    font-weight: bold;
  }

  code {
    background-color: rgba(27, 31, 35, 0.05);
    padding: 0.2em 0.4em;
    margin: 0;
    font-size: 85%;
    border-radius: 3px;
    font-family: 'Source Code Pro', monospace;
    color: inherit;
    white-space: pre-wrap; /* Ensure code wraps properly */
  }

  /* Table styling */
  table {
    width: 100%;
    border-collapse: collapse;
    margin: 10px 0;
    background-color: ${({ theme }) => theme.tableBackground};
  }

  th, td {
    border: 1px solid ${({ theme }) => theme.tableBorderColor};
    padding: 8px;
  }

  th {
    background-color: ${({ theme }) => theme.textColor};
    color: ${({ theme }) => theme.background};
    font-weight: bold;
  }
`;

const Timestamp = styled.span`
  display: block;
  font-size: 0.75rem;
  color: #ccc;
  margin-top: 5px;
  text-align: ${({ $sender }) => ($sender === 'user' ? 'right' : 'left')};
`;

const Message = ({ message }) => {
  const { sender, text, timestamp } = message;

  return (
    <MessageContainer $sender={sender}>
      <Avatar $sender={sender}>
        {sender === 'openai' && (
          <FaRobot
            size={24}
            color={sender === 'error' ? '#dc3545' : undefined} // Error messages have red icons
          />
        )}
        {sender === 'user' && (
          <FaUserCircle size={24} />
        )}
        {sender === 'system' && (
          <img src="https://avivarma.ca/images/avivarma.jpeg" alt="Avi" />
        )}
        {sender === 'error' && (
          <FaRobot size={24} color="#dc3545" />
        )}
      </Avatar>
      <div>
        <MessageBubble $sender={sender}>
          {sender === 'openai' && text === 'Typing...' ? (
            <TypingIndicator />
          ) : (
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={{
                code({ node, inline, className, children, ...props }) {
                  const match = /language-(\w+)/.exec(className || '');
                  return !inline && match ? (
                    <CodeBlock code={String(children).replace(/\n$/, '')} />
                  ) : (
                    <code
                      className={className}
                      style={{
                        backgroundColor: 'rgba(27,31,35,0.05)',
                        padding: '0.2em 0.4em',
                        borderRadius: '3px',
                        fontFamily: 'Source Code Pro, monospace',
                      }}
                      {...props}
                    >
                      {children}
                    </code>
                  );
                },
                a: ({ node, href, children, ...props }) => (
                  <a
                    href={href}
                    style={{ color: '#667eea', textDecoration: 'underline' }}
                    target="_blank"
                    rel="noopener noreferrer"
                    aria-label={children && children.length > 0 ? (typeof children[0] === 'string' ? children[0] : 'Link') : 'Link'}
                    {...props}
                  >
                    {children}
                  </a>
                ),
              }}
            >
              {text}
            </ReactMarkdown>
          )}
        </MessageBubble>
        <Timestamp $sender={sender}>
          {text === 'Typing...' ? 'Typing...' : timestamp}
        </Timestamp>
      </div>
    </MessageContainer>
  );
};

export default React.memo(Message);

================
File: src/components/TypingIndicator.jsx
================
// src/components/TypingIndicator.jsx

import React from 'react';
import styled, { keyframes } from 'styled-components';

const TypingAnimation = keyframes`
  0% { opacity: 0.2; }
  20% { opacity: 1; }
  100% { opacity: 0.2; }
`;

const IndicatorContainer = styled.div`
  display: flex;
  gap: 6px; /* Reduced gap between dots */
  margin-top: 4px; /* Reduced margin-top */

  div {
    width: 8px; /* Adjusted size of dots */
    height: 8px; /* Adjusted size of dots */
    background-color: #667eea; /* Color of dots */
    border-radius: 50%;
    animation: ${TypingAnimation} 1.5s infinite; /* Animation duration */
  }

  div:nth-child(2) {
    animation-delay: 0.3s; /* Animation delay */
  }

  div:nth-child(3) {
    animation-delay: 0.6s; /* Animation delay */
  }
`;

const TypingIndicator = () => (
  <IndicatorContainer>
    <div></div>
    <div></div>
    <div></div>
  </IndicatorContainer>
);

export default React.memo(TypingIndicator);

================
File: src/GlobalStyle.js
================
import { createGlobalStyle } from 'styled-components';

const GlobalStyle = createGlobalStyle`
  /* Reset some default styles */
  body {
    margin: 0;
    padding: 0;
    background-color: ${({ theme }) => theme.background};
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: ${({ theme }) => theme.textColor};
    transition: background-color 0.3s, color 0.3s;
    height: 100vh;
    overflow: hidden;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  #root {
    height: 100%; 
    display: flex;
    flex-direction: column;
  }

  /* Global box-sizing for consistent layouts */
  *, *::before, *::after {
    box-sizing: border-box;
  }

  /* Reset margins for headings and lists */
  h1, h2, h3, h4, h5, h6, p {
    margin: 0;
    padding: 0;
  }

  ul, ol {
    margin: 0;
    padding-left: 1.5em;
  }

  /* Global link styling */
  a {
    color: ${({ theme }) => theme.linkColor};
    text-decoration: none;
    transition: color 0.3s;
  }

  a:hover {
    text-decoration: underline;
  }

  /* Focus outline for accessibility */
  *:focus {
    outline: 2px solid ${({ theme }) => theme.focusColor};
    outline-offset: 2px;
  }

  /* Customize scrollbar for WebKit browsers */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: ${({ theme }) => theme.scrollbarTrack};
  }

  ::-webkit-scrollbar-thumb {
    background-color: ${({ theme }) => theme.scrollbarThumb};
    border-radius: 4px;
    border: 2px solid ${({ theme }) => theme.scrollbarTrack};
  }

  /* Firefox scrollbar styles */
  * {
    scrollbar-width: thin;
    scrollbar-color: ${({ theme }) => theme.scrollbarThumb} ${({ theme }) => theme.scrollbarTrack};
  }
`;

export default GlobalStyle;

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/themes.js
================
// src/themes.js

export const darkTheme = {
  mode: 'dark',
  background: '#2c2c2c',
  inputBackground: '#3a3a3a',
  inputFocusBackground: '#4a4a4a',
  messageUser: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  messageOpenAI: '#1e1e1e',
  messageError: '#dc3545',
  messageSystem: '#4a4a4a', // Lighter grey for better contrast in dark mode
  textColor: '#ffffff', // White text for dark theme
  iconColor: '#ffffff',
  placeholderColor: '#a0a0a0',
  sendButtonBackground: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  sendButtonHoverBackground: 'linear-gradient(135deg, #5a67d8 0%, #6b5dba 100%)',
  scrollbarThumb: '#888888',
  scrollbarTrack: '#333333',
  tableBackground: '#1c1c1c', // Darker table background to contrast with text
  tableBorderColor: '#555555'  // Visible borders in dark theme
};

export const lightTheme = {
  mode: 'light',
  background: '#f9f9f9',
  inputBackground: '#ffffff',
  inputFocusBackground: '#f0f0f0',
  messageUser: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  messageOpenAI: '#e0e0e0',
  messageError: '#dc3545',
  messageSystem: '#d9d9d9', // Slightly darker grey for good visibility in light mode
  textColor: '#000000',
  iconColor: '#000000',
  placeholderColor: '#606060',
  sendButtonBackground: 'linear-gradient(135deg, #34c759 0%, #28a745 100%)',
  sendButtonHoverBackground: 'linear-gradient(135deg, #28a745 0%, #218838 100%)',
  scrollbarThumb: '#888888',
  scrollbarTrack: '#f0f0f0',
  tableBackground: '#ffffff', // Light table background for contrast
  tableBorderColor: '#dddddd'  // Light table borders
};
